{
  "layout": {
    "about": "О нас",
    "algorithms": "Алгоритмы",
    "kruskal": "Алгоритм Краскала",
    "prim": "Алгоритм Прима",
    "dijkstra": "Алгоритм Дейкстры",
    "floyd": "Алгоритм Флойда",
    "footer": "© {{ year }} - Алгоритмы",
    "edge": "Ребро",
    "algorithms_and_methods": "Алгоритмы и методы"
  },
  "about": {
    "title": "О нас",
    "purpose_title": "Цель сайта",
    "purpose_text": "Этот сайт создан как образовательный инструмент, чтобы помочь студентам и энтузиастам понять и визуализировать четыре фундаментальных алгоритма на графах: алгоритмы Краскала, Прима, Дейкстры и Флойда-Уоршалла. Каждый алгоритм представлен с интерактивными инструментами, позволяющими вводить данные графа, изучать пошаговое выполнение и визуализировать результаты, способствуя более глубокому пониманию теории графов и алгоритмического решения задач. Платформа стремится сократить разрыв между теоретическими концепциями и практическим применением, предлагая опыт работы с визуализациями графов в реальном времени, делая сложные идеи более доступными и увлекательными для учащихся всех уровней.",
    "team_title": "Наша команда",
    "developers": [
      {
        "name": "Артём Портов",
        "role": "Создал страницы 'О нас' и алгоритм Прима. Помог разработать стиль фона."
      },
      {
        "name": "Василиса Савинская",
        "role": "Разработала главную страницу сайта и страницу для алгоритма Краскала."
      },
      {
        "name": "Дарья Равилова",
        "role": "Разработала страницу для алгоритма Флойда-Уоршалла."
      },
      {
        "name": "Карина Балабанова",
        "role": "Разработала страницу с часто задаваемыми вопросами и создала страницу для алгоритма Дейкстры."
      }
    ]
  },
  "index": {
    "title": "Алгоритмы и методы",
    "call_to_action": "Нужна помощь в решении задач на графах с визуальной ясностью? Выберите нужный алгоритм и рассчитывайте с лёгкостью!",
    "kruskal_description": "Алгоритм Краскала: Жадный алгоритм для нахождения минимального остовного дерева (MST) в графе путём добавления наименьшего ребра, не образующего цикл.",
    "prim_description": "Алгоритм Прима: Другой жадный подход для нахождения MST, вырастающий дерево по одной вершине за раз от начальной вершины.",
    "dijkstra_description": "Алгоритм Дейкстры: Алгоритм нахождения кратчайшего пути, определяющий минимальное расстояние от исходной вершины до всех остальных вершин в графе с неотрицательными весами.",
    "floyd_description": "Алгоритм Флойда: Алгоритм динамического программирования, вычисляющий кратчайшие пути между всеми парами вершин во взвешенном графе."
  },
  "prim": {
    "title": "Алгоритм Прима",
    "theory_title": "Алгоритм Прима: Подробный разбор",
    "theory_how_it_works": "Как это работает",
    "theory_steps": [
      "Начните с произвольной вершины: Выберите любую вершину графа для начала. Эта вершина станет корнем минимального остовного дерева (MST).",
      "Добавляйте наименьшее ребро: Из множества рёбер, соединяющих текущее MST с непосещённой вершиной, выберите ребро с наименьшим весом и добавьте его в MST.",
      "Повторяйте, пока все вершины не будут включены: Продолжайте добавлять рёбра с наименьшими весами, пока все вершины графа не станут частью MST."
    ],
    "theory_result": "Результатом будет дерево, охватывающее все вершины с минимально возможным суммарным весом рёбер.",
    "calculator_input_title": "Ввод данных",
    "calculator_input_vertices": "Количество вершин (1-12):",
    "calculator_input_mode": "Режим весов рёбер:",
    "calculator_input_mode_manual": "Ручной",
    "calculator_input_mode_auto": "Автоматический",
    "calculator_input_create": "Создать граф",
    "calculator_input_weights_title": "Введите веса рёбер",
    "calculator_input_confirm": "Подтвердить",
    "calculator_graph_title": "Граф",
    "calculator_graph_instruction": "Нажмите на вершину, чтобы выбрать начальную точку.",
    "calculator_mst_title": "Минимальное остовное дерево",
    "calculator_mst_weight": "Общий вес: "
  }
}